resources:
- https://stackoverflow.com/questions/19009932/import-arbitrary-python-source-file-python-3-3


globals:
  resources:
  - ${ROOT_DIR}/assertions/app.py


tests:
- function: format_module_name
  description: >
    Returns the name of the module. Creates the name
    for the module's location if the name doesn't exist
  tests:
  - description: Name is null
    arguments:
      location: /main/shared/get_module/test_resources/app.py
      name: null
    assertions:
    - method: equals
      expected:
        name: .main.shared.get_module.test_resources.app
  - description: Location is null
    arguments:
      name: name
      location: null
    assertions:
    - method: equals
      expected:
        name: name
  - description: Name and location are null
    arguments:
      name: null
      location: null
    assertions:
    - method: equals
      expected:
        name: app
- function: get_module_from_location
  description: Get the module at a given file path
  tests:
  - description: Module location doesn't exist
    arguments:
      location: DOES_NOT_EXIST/app.py
    assertions:
    - method: equals
      expected:  {}
  - description: Module is defined
    arguments:
      module: module
    assertions:
    - method: equals
      expected: {}
  - description: Module is undefined and the module location exist
    arguments:
      name: app
      location: ${ROOT_DIR}/main/shared/get_module/test_resources/app.py
    cast_output:
    - caster: __builtins__.str
    assertions:
    - method: equals
      expected: "{'module': <module 'app' from '${ROOT_DIR}/main/shared/get_module/test_resources/app.py'>}"
- function: get_module_from_pool
  tests:
  - description: Returns a new instance of the module
    arguments:
      pool: false
      location: location
    assertions:
    - method: equals
      expected:
        module: null
  - description: Returns a module in the pool
    arguments:
      location: location
      pool: True
    patches:
    - method: value
      name: POOL
      value:
        location: module_from_pool
    assertions:
    - method: equals
      expected:
        module: module_from_pool
- function: add_module_to_pool
  description: Adds the module and module location as to the pool as key/value pair
  tests:
  - description: Add defined location and module to pool
    arguments:
      location: location
      module: module
      pool: false
    assertions:
    - method: equals
      expected: {}
  - description: Don't add module to pool
    arguments:
      location: location
      module: module
      pool: true
    assertions:
    - method: equals
      expected: {}
- function: main
  description: Orchestrates execution of functions within the module
  tests:
  - description: Get module from location
    arguments:
      pool: false
      location: ${ROOT_DIR}/main/shared/get_module/test_resources/app.py
      name: app
    assertions:
    - method: type
      expected: module
    - method: equals
      field: __file__
      expected: ${ROOT_DIR}/main/shared/get_module/test_resources/app.py
  - description: Get module from pool
    patches:
    - name: POOL
      method: value
      value:
        location: module
    arguments:
      pool: true
      location: location
    assertions:
    - method: equals
      expected: module
