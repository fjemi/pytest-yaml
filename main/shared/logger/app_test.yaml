todo:
- Are exceptions being logged correctly to `exception.log`? Doesn't look like it...


resources:
- https://stackoverflow.com/questions/11232230/logging-to-two-files-with-different-settings


globals:
  resources:
  - ${ROOT_DIR}/assertions/app.py


tests:
- function: process_arguments
  description: >
    Process local agruments of the main function
    and return the arguments as a dataclass
  tests:
  - arguments:
      locals:
        data: data
        format_: format_
        level: level
        location: location
        standard_output: standard_output
        timestamp: timestamp
        enabled: null
        status: null
    assertions:
    - method: type
      expected: Data
  - cast_output:
    - caster: dc.asdict
    assertions:
    - method: equals
      expected:
        data: null
        format_: null
        level: null
        location: null
        standard_output: null
        timestamp: null
        enabled: null
        status: null
- function: get_task_from_event_loop
  description: Returns the result of a coroutine from the event loop
  cast_arguments:
  - caster: test_resources.app.task_resource
    field: task
  tests:
  - arguments:
      task: null
    assertions:
    - method: equals
      expected: null
  - arguments:
      task: sync_function
    assertions:
    - method: equals
      expected: sync_output
  - arguments:
      task: async_function
    assertions:
    - method: equals
      expected: async_output
- function: set_default
  description: >
    Formats and returns objects that
    are not JSON searializable
  tests:
  - description: >
      Return the object cast as a string when
      kind not defined or object is not an
      Exception
    arguments:
      object: string
    assertions:
    - method: equals
      expected: string
  - description: Undefined object produces an error
    arguments:
      object: null
    assertions:
    - method: equals
      expected: None
  - description: When the object is a module, return its location
    cast_arguments:
    - caster: test_resources.app.set_default_resource
      field: object
    arguments:
      object: module
    assertions:
    - method: equals
      expected: ${ROOT_DIR}main/shared/logger/test_resources/module.py
  - description: Object is a function
    cast_arguments:
    - caster: test_resources.app.set_default_resource
      field: object
    arguments:
      object: function
    assertions:
    - method: equals
      expected: function
  - description: Object is of type sh`Test`
    cast_arguments:
    - caster: test_resources.app.set_default_resource
      field: object
    arguments:
      object: Test
    assertions:
    - method: type
      expected: str
    - method: contains
      expected: .main.shared.logger.test_resources.app.Test
  - description: >
      Object is of type sh`Exception`
    cast_arguments:
    - caster: test_resources.app.set_default_resource
      field: object
    arguments:
      object: Exception
    assertions:
    - method: equals
      expected:
        exception: TypeError
        description: 'unsupported operand type(s) for +: ''int'' and ''str'''
- function: format_location
  description: Format locatin of log a file
  tests:
  - description: Level is undefined
    arguments:
      level: null
      enabled: true
    assertions:
    - method: equals
      expected:
        location: ${LOGS_DIR}/debug.log
  - description: Level is undefined
    arguments:
      level: level
      enabled: true
    assertions:
    - method: equals
      expected:
        location: ${LOGS_DIR}/level.log
  - description: Logging is not enabled
    arguments:
      level: level
      enabled: false
    assertions:
    - method: equals
      expected:
        status: exited
- function: format_data
  description: Returns a dictionary containing the data to be logged and a timestamp
  tests:
  - description: Data field of the dataclass is a dictionary
    arguments:
      data:
        key: value
    assertions:
    - method: equals
      expected:
        data:
          key: value
  - description: Data field of the dataclass is a dataclass
    cast_arguments:
    - caster: test_resources.app.Test_Data
      field: data
      unpack: True
    arguments:
      data: null
    assertions:
    - method: equals
      expected:
        data:
          a: 0
          b: 0
- function: convert_data_to_json
  description: Converts data to JSON
  cast_arguments:
  - caster: Data
    field: data
    unpack: True
  tests:
  - arguments:
      data: {}
    assertions:
    - method: equals
      expected:
        data: '{}'
  - arguments:
      data:
        key: value
    assertions:
    - method: equals
      expected:
        data: '{"key": "value"}'
  - arguments:
      data:
        a: a
        b: b
    assertions:
    - method: equals
      expected:
        data: '{"a": "a", "b": "b"}'
- function: convert_data_to_yaml
  description: Convert data to YAML
  cast_arguments:
  - caster: Data
    field: data
    unpack: True
  tests:
  - description: Empty dictionary
    arguments:
      data: {}
    assertions:
    - method: equals
      expected:
        data: |
          {}
  - description: Dictionary with keys and values
    arguments:
      data:
        a: a
        b: b
    assertions:
    - method: equals
      expected:
        data: |
          a: a
          b: b
- function: convert_data
  description: Convert fields within the data object
  cast_arguments:
  - caster: Data
    field: data
    unpack: True
  tests:
  - description: Format as JSON
    arguments:
      data:
        a: a
        b: b
      format_: json
    assertions:
    - method: equals
      expected:
        data: '{"a": "a", "b": "b"}'
  - description: Format is YAML
    arguments:
      data:
        a: a
        b: b
      format_: yaml
    assertions:
    - method: equals
      expected:
        data: |
          a: a
          b: b
- function: format_level
  description: Returns an integer representing the logging level
  tests:
  - description: Handle undefined level
    arguments:
      level: null
      enabled: true
    assertions:
    - method: equals
      expected:
        level: 10
  - description: Handle debug level
    arguments:
      level: debug
      enabled: true
    assertions:
    - method: equals
      expected:
        level: 10
  - description: Handle info level
    arguments:
      level: info
      enabled: true
    assertions:
    - method: equals
      expected:
        level: 20
  - description: Handle exception level
    arguments:
      level: error
      enabled: true
    assertions:
    - method: equals
      expected:
        level: 10
  - description: Logging is disabled
    arguments:
      level: error
      enabled: false
    assertions:
    - method: equals
      expected:
        status: exited
- function: create_logger
  description: Creates a logger for a level and file handler
  tests:
  - description: Log level is info
    arguments:
      level: INFO
      location: ${ROOT_DIR}/main/shared/logger/test_resources/logs/info.log
    assertions:
    - method: type
      expected: Logger
  - description: Log level is debug
    arguments:
      level: DEBUG
      location: ${ROOT_DIR}/main/shared/logger/test_resources/logs/debug.log
    assertions:
    - method: type
      expected: Logger
  - description: Logging level is debug
    arguments:
      level: DEBUG
      location: ${ROOT_DIR}/main/shared/logger/test_resources/logs/debug.log
    cast_output:
    - caster: __builtins__.str
    assertions:
    - method: equals
      expected: <Logger ${ROOT_DIR}/main/shared/logger/test_resources/logs/debug.log (DEBUG)>
- function: log_data
  description: Get a logger form the pool; or create a logger, add it to the pool, and return the logger
  tests:
  - arguments:
      location: ${ROOT_DIR}/main/shared/logger/test_resources/logs/debug.log
      level: 10
      data: data
      enabled: true
    assertions:
    - method: equals
      expected:
        status: success
  - arguments:
      location: ${ROOT_DIR}/main/shared/logger/test_resources/logs/debug.log
      level: 10
      data: data
      enabled: true
    assertions:
    - method: equals
      expected:
        status: success
  - arguments:
      location: ${ROOT_DIR}/main/shared/logger/test_resources/logs/error.log
      level: 40
      data: data
      enabled: true
    assertions:
    - method: equals
      expected:
        status: success
  - arguments:
      location: null
      level: null
      data: data
      enabled: false
    assertions:
    - method: equals
      expected:
        status: exited
- function: output_to_terminal
  description: Handles printing logs int the CLI
  tests:
  - description: Print logs is set to true
    arguments:
      data:
        a: a
        b: b
      standard_output: true
    assertions:
    - method: equals
      expected:
        status: success
  - description: Print logs is set to false
    arguments:
      data:
        a: a
        b: b
      standard_output: false
    assertions:
    - method: equals
      expected:
        status: exited
- function: main
  description: Handles logging and outputing to the terminal
  tests:
  - description: Only logging enabled
    arguments:
      data:
        a: a
        b: b
      format_: yaml
      level: info
      location: null
      timestamp: timestamp
      standard_output: False
      enabled: True
    assertions:
    - method: equals
      expected:
        status: exited
  - description: Logging and standard output are disabled
    arguments:
      data:
        a: a
        b: b
      format_: yaml
      level: info
      location: null
      timestamp: timestamp
      standard_output: False
      enabled: False
    assertions:
    - method: equals
      expected:
        status: exited
  - description: Only standard output is enabled
    arguments:
      data:
        a: a
        b: b
      format_: yaml
      level: info
      location: null
      timestamp: timestamp
      standard_output: True
      enabled: False
    assertions:
    - method: equals
      expected:
        status: success